from aiogram.fsm.context import FSMContext
import asyncio
import logging
from aiogram import Bot, Dispatcher, F, types
import secrets
from aiogram.filters import CommandStart
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, FSInputFile, InputMediaPhoto
from aiogram.exceptions import TelegramBadRequest
from database import SessionLocal, User, Deal, init_db

BOT_TOKEN = "8229893992:AAH1zr7PTajg7uKdPlSB1kI0k3-om-6i8Tc"
PHOTO_PATH = "photo_2025-09-12_18-04-44.jpg"

WELCOME_TEXT = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ELF OTC ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π P2P-–≥–∞—Ä–∞–Ω—Ç\n\n"
    "üíº –ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ –≤—Å—ë, —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äì –±–µ–∑–æ–ø–∞—Å–Ω–æ!\n"
    "–û—Ç Telegram-–ø–æ–¥–∞—Ä–∫–æ–≤ –∏ NFT –¥–æ —Ç–æ–∫–µ–Ω–æ–≤ –∏ —Ñ–∏–∞—Ç–∞ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –ª–µ–≥–∫–æ –∏ –±–µ–∑ —Ä–∏—Å–∫–∞.\n\n"
    "üîπ –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏\n"
    "üîπ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞\n"
    "üîπ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–¥–µ–ª–∫–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"
)

class WalletManagement(StatesGroup):
    enter_ton_wallet = State()
    enter_card_number = State()

class DealCreation(StatesGroup):
    enter_amount = State()
    enter_description = State()

def get_main_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏", callback_data="add_wallet")],
        [InlineKeyboardButton(text="üìÑ –°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data="create_deal")],
        [InlineKeyboardButton(text="üß∑ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", callback_data="referral_link")],
        [InlineKeyboardButton(text="üåê Change language", callback_data="change_language")]
    ])
    return keyboard

def get_language_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá¨üáß English", callback_data="set_lang_en")],
        [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="set_lang_ru")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

def get_payment_method_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™ô TON –∫–æ—à–µ–ª–µ–∫", callback_data="payment_ton")],
        [InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="payment_card")],
        [InlineKeyboardButton(text="üåü Telegram Stars", callback_data="payment_stars")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

def get_deal_amount_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üí± –ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É", callback_data="change_currency"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_deal")
        ]
    ])
    return keyboard

def get_currency_selection_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="RUB üá∑üá∫", callback_data="set_currency_RUB"),
            InlineKeyboardButton(text="UAH üá∫üá¶", callback_data="set_currency_UAH")
        ],
        [
            InlineKeyboardButton(text="KZT üá∞üáø", callback_data="set_currency_KZT"),
            InlineKeyboardButton(text="BYN üáßüáæ", callback_data="set_currency_BYN")
        ],
        [
            InlineKeyboardButton(text="UZS üá∫üáø", callback_data="set_currency_UZS"),
            InlineKeyboardButton(text="KGS üá∞üá¨", callback_data="set_currency_KGS")
        ],
        [
            InlineKeyboardButton(text="AZN üá¶üáø", callback_data="set_currency_AZN"),
            InlineKeyboardButton(text="TON üíé", callback_data="set_currency_TON")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="create_deal")]
    ])
    return keyboard

def get_back_to_main_menu_button():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]
    ])
    return keyboard

def get_buyer_deal_menu(deal_code: str, tonkeeper_link: str = None):
    buttons = []
    if tonkeeper_link:
        buttons.append([
            InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤ Tonkeeper", url=tonkeeper_link)
        ])
    buttons.extend([
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f"confirm_payment_{deal_code}")
        ],
        [
            InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ —Å–¥–µ–ª–∫–∏", callback_data=f"leave_deal_{deal_code}")
        ]
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_seller_gift_sent_menu(deal_code: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì§ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–¥–∞—Ä–æ–∫", callback_data=f"gift_sent_{deal_code}")
        ]
    ])
    return keyboard

def get_wallet_menu():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="ü™ô –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å TON-–∫–æ—à–µ–ª–µ–∫", callback_data="edit_ton_wallet")],
        [InlineKeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ä—Ç—É", callback_data="edit_card")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ])
    return keyboard

dp = Dispatcher()

@dp.callback_query(F.data.startswith("confirm_payment_"))
async def confirm_payment_handler(callback: types.CallbackQuery, bot: Bot):
    deal_code = callback.data.split("_")[2]
    db = SessionLocal()
    try:
        deal = db.query(Deal).filter(Deal.deal_code == deal_code).first()

        if not deal:
            await callback.answer("‚ùå –°–¥–µ–ª–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return

        if deal.buyer_id != callback.from_user.id:
            await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–¥–µ–ª–∫–∞.", show_alert=True)
            return

        if deal.status != 'awaiting_buyer':
            await callback.answer("‚ùå –≠—Ç—É —Å–¥–µ–ª–∫—É —É–∂–µ –Ω–µ–ª—å–∑—è –æ–ø–ª–∞—Ç–∏—Ç—å.", show_alert=True)
            return

        deal.status = 'pending_confirmation'
        db.commit()

        buyer_caption = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –¥–ª—è —Å–¥–µ–ª–∫–∏ #{deal.deal_code}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞."
        )
        media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=buyer_caption)
        await callback.message.edit_media(media=media, reply_markup=None)

        seller_caption = (
            f"‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É –ø–æ —Å–¥–µ–ª–∫–µ #{deal.deal_code}\n\n"
            f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {deal.description}\n"
            f"üë§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥—É –ü–æ–∫—É–ø–∞—Ç–µ–ª—é: @{callback.from_user.username}\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ."
        )
        await bot.send_photo(
            chat_id=deal.seller_id,
            photo=FSInputFile(PHOTO_PATH),
            caption=seller_caption,
            reply_markup=get_seller_gift_sent_menu(deal.deal_code)
        )
        await callback.answer()

    finally:
        db.close()

@dp.callback_query(F.data.startswith("gift_sent_"))
async def gift_sent_handler(callback: types.CallbackQuery):
    deal_code = callback.data.split("_")[2]
    db = SessionLocal()
    try:
        deal = db.query(Deal).filter(Deal.deal_code == deal_code).first()
        if not deal or deal.seller_id != callback.from_user.id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Å–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
            return

        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.answer(
            "–°–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            show_alert=True
        )
    finally:
        db.close()

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.user_id == user_id).first()
        if not db_user:
            db_user = User(user_id=user_id, username=message.from_user.username)
            db.add(db_user)
        else:
            db_user.username = message.from_user.username
        db.commit()

        args = message.text.split()
        if len(args) > 1:
            deal_code = args[1]
            deal = db.query(Deal).filter(Deal.deal_code == deal_code).first()
            if deal and deal.status == 'awaiting_buyer':
                seller = db.query(User).filter(User.user_id == deal.seller_id).first()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–ª –ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏
                if deal.payment_method == 'ton' and not (seller and seller.ton_wallet):
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ —É–∫–∞–∑–∞–ª TON-–∫–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
                    return
                elif deal.payment_method == 'card' and not (seller and seller.card_number):
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ —É–∫–∞–∑–∞–ª –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã.")
                    return
                elif not seller:
                    await message.answer("‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                deal.buyer_id = user_id

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
                caption = ""
                reply_markup = None
                base_caption = (
                    f"üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–¥–µ–ª–∫–µ #{deal.deal_code}\n\n"
                    f"üë§ –í—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –≤ —Å–¥–µ–ª–∫–µ.\n"
                    f"üìå –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller.username} ({seller.user_id})\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏: 0\n\n"
                    f"‚Ä¢ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ: {deal.description}\n\n"
                )

                if deal.payment_method == 'ton':
                    amount = deal.amount / 100.0
                    currency = deal.currency or "TON" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ TON –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    tonkeeper_link = f"ton://transfer/{seller.ton_wallet}?amount={int(amount * 1_000_000_000)}&text={deal.deal_code}"
                    caption = base_caption + (
                        f"üè¶ –ê–¥—Ä–µ—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n`{seller.ton_wallet}`\n\n"
                        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} {currency}\n"
                        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–ª–∞—Ç–µ–∂—É(–º–µ–º–æ): `{deal.deal_code}`\n\n"
                        f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π(–º–µ–º–æ) –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω!"
                    )
                    reply_markup = get_buyer_deal_menu(deal.deal_code, tonkeeper_link)
                elif deal.payment_method == 'card':
                    amount = deal.amount / 100.0
                    currency = deal.currency or "RUB" # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ RUB –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    caption = base_caption + (
                        f"üè¶ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n`{seller.card_number}`\n\n"
                        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} {currency}\n\n"
                        f"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'."
                    )
                    reply_markup = get_buyer_deal_menu(deal.deal_code)

                db.commit()
                await message.answer_photo(
                    photo=FSInputFile(PHOTO_PATH),
                    caption=caption,
                    parse_mode="Markdown",
                    reply_markup=reply_markup
                )
                return
            elif deal:
                await message.answer("–≠—Ç–∞ —Å–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                return
            else:
                await message.answer("‚ùå –°–¥–µ–ª–∫–∞ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

    finally:
        db.close()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ deeplink
    await message.answer_photo(
        photo=FSInputFile(PHOTO_PATH),
        caption=WELCOME_TEXT,
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery):
    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=WELCOME_TEXT)
    await callback.message.edit_media(
        media=media,
        reply_markup=get_main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "add_wallet")
async def add_wallet_handler(callback: types.CallbackQuery):
    caption = (
        "üì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ãüëá"
    )
    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=caption)
    await callback.message.edit_media(
        media=media,
        reply_markup=get_wallet_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "edit_ton_wallet")
async def edit_ton_wallet_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WalletManagement.enter_ton_wallet)
    await state.update_data(message_to_edit=callback.message.message_id)

    caption = ""
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.user_id == callback.from_user.id).first()
        if db_user and db_user.ton_wallet:
            caption = f"–í–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ—à–µ–ª–µ–∫ TON:\n`{db_user.ton_wallet}`\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å."
        else:
            caption = "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ TON –∫–æ—à–µ–ª—å–∫–∞:"
    finally:
        db.close()

    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=caption, parse_mode="Markdown")
    await callback.message.edit_media(media=media)
    await callback.answer()

@dp.message(WalletManagement.enter_ton_wallet)
async def process_ton_wallet(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id_to_edit = data.get("message_to_edit")
    await state.clear()

    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.user_id == message.from_user.id).first()
        if db_user:
            db_user.ton_wallet = message.text
            db.commit()
    finally:
        db.close()

    await message.delete()

    caption = "‚úÖ –í–∞—à TON –∫–æ—à–µ–ª–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ãüëá"
    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=caption)
    if message_id_to_edit:
        await bot.edit_message_media(chat_id=message.chat.id, message_id=message_id_to_edit, media=media, reply_markup=get_wallet_menu())

@dp.callback_query(F.data == "edit_card")
async def edit_card_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(WalletManagement.enter_card_number)
    await state.update_data(message_to_edit=callback.message.message_id)
    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã:")
    await callback.message.edit_media(media=media)
    await callback.answer()

@dp.message(WalletManagement.enter_card_number)
async def process_card_number(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id_to_edit = data.get("message_to_edit")
    await state.clear()

    await message.delete()

    caption = ""
    db = SessionLocal()
    try:
        if message.text and message.text.replace(" ", "").isdigit():
            db_user = db.query(User).filter(User.user_id == message.from_user.id).first()
            if db_user:
                db_user.card_number = message.text
                db.commit()
            caption = "‚úÖ –ù–æ–º–µ—Ä –≤–∞—à–µ–π –∫–∞—Ä—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n\nüì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ãüëá"
        else:
            caption = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\nüì• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º–∏\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ãüëá"
    finally:
        db.close()

    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=caption)
    if message_id_to_edit:
        await bot.edit_message_media(chat_id=message.chat.id, message_id=message_id_to_edit, media=media, reply_markup=get_wallet_menu())

@dp.callback_query(F.data == "create_deal")
async def create_deal_handler(callback: types.CallbackQuery):
    media = InputMediaPhoto(
        media=FSInputFile(PHOTO_PATH),
        caption="üí∞–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã:"
    )
    await callback.message.edit_media(
        media=media,
        reply_markup=get_payment_method_menu()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("payment_"))
async def handle_payment_method(callback: types.CallbackQuery, state: FSMContext):
    payment_method = callback.data.split("_")[1]
    user_id = callback.from_user.id
    
    db = SessionLocal()
    try:
        db_user = db.query(User).filter(User.user_id == user_id).first()
        if not db_user:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start", show_alert=True)
            return

        if payment_method == "card":
            if not db_user.card_number:
                back_button = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
                media = InputMediaPhoto(
                    media=FSInputFile(PHOTO_PATH),
                    caption="‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏."
                )
                await callback.message.edit_media(media=media, reply_markup=back_button)
                await callback.answer()
                return
        elif payment_method == "ton":
            if not db_user.ton_wallet:
                back_button = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
                ])
                media = InputMediaPhoto(
                    media=FSInputFile(PHOTO_PATH),
                    caption="‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à TON-–∫–æ—à–µ–ª–µ–∫ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–¥–µ–ª–∫–∏."
                )
                await callback.message.edit_media(media=media, reply_markup=back_button)
                await callback.answer()
                return
    finally:
        db.close()

    await state.set_state(DealCreation.enter_amount)
    
    currency_name = ""
    if payment_method == "ton":
        currency_name = "TON"
    elif payment_method == "card":
        currency_name = "RUB"
    elif payment_method == "stars":
        currency_name = "Stars"

    await state.update_data(currency=currency_name, message_to_edit=callback.message.message_id)

    caption = (
        f"üíº –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {currency_name} —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 100.5"
    )
    media = InputMediaPhoto(
        media=FSInputFile(PHOTO_PATH),
        caption=caption
    )
    await callback.message.edit_media(media=media, reply_markup=get_deal_amount_menu())
    await callback.answer()

@dp.message(DealCreation.enter_amount)
async def process_deal_amount(message: Message, state: FSMContext, bot: Bot):
    try:
        amount = float(message.text.replace(',', '.'))
    except ValueError:
        await message.delete()
        return

    await state.update_data(amount=amount)
    data = await state.get_data()
    currency = data.get("currency", "")
    message_id_to_edit = data.get("message_to_edit")

    await message.delete()
    await state.set_state(DealCreation.enter_description)

    caption = (
        f"üìù –£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ –≤ —ç—Ç–æ–π —Å–¥–µ–ª–∫–µ –∑–∞ {amount} {currency}:\n\n"
        "–ü—Ä–∏–º–µ—Ä: 10 –ö–µ–ø–æ–∫ –∏ –ü–µ–ø–µ..."
    )
    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=caption)
    if message_id_to_edit:
        await bot.edit_message_media(chat_id=message.chat.id, message_id=message_id_to_edit, media=media, reply_markup=None)

@dp.message(DealCreation.enter_description)
async def process_deal_description(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    message_id_to_edit = data.get("message_to_edit")
    amount = data.get("amount")
    currency = data.get("currency")
    payment_method = data.get("payment_method")
    description = message.text

    await state.clear()
    await message.delete()

    deal_code = secrets.token_urlsafe(8)

    db = SessionLocal()
    try:
        new_deal = Deal(
            seller_id=message.from_user.id,
            amount=int(amount * 100),
            description=description,
            currency=currency,
            payment_method=payment_method,
            deal_code=deal_code
        )
        db.add(new_deal)
        db.commit()
    finally:
        db.close()

    bot_info = await bot.get_me()
    deal_link = f"https://t.me/{bot_info.username}?start={deal_code}"

    caption = (
        f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"üí∞ –°—É–º–º–∞: {amount} {currency}\n"
        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: `{deal_link}`"
    )

    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=caption, parse_mode="Markdown")
    if message_id_to_edit:
        await bot.edit_message_media(chat_id=message.chat.id, message_id=message_id_to_edit, media=media, reply_markup=get_back_to_main_menu_button())

@dp.callback_query(F.data == "change_currency")
async def change_currency_handler(callback: types.CallbackQuery):
    caption = "üí± –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è —Å–¥–µ–ª–∫–∏:"
    media = InputMediaPhoto(
        media=FSInputFile(PHOTO_PATH),
        caption=caption
    )
    await callback.message.edit_media(media=media, reply_markup=get_currency_selection_menu())
    await callback.answer()

@dp.callback_query(F.data.startswith("set_currency_"))
async def set_currency_handler(callback: types.CallbackQuery, state: FSMContext):
    currency_name = callback.data.split("_")[2]
    await state.update_data(currency=currency_name)

    caption = (
        f"üíº –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {currency_name} —Å–¥–µ–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 100.5"
    )
    media = InputMediaPhoto(
        media=FSInputFile(PHOTO_PATH),
        caption=caption
    )
    await callback.message.edit_media(media=media, reply_markup=get_deal_amount_menu())
    await callback.answer()
@dp.callback_query(F.data == "referral_link")
async def referral_link_handler(callback: types.CallbackQuery):
    await callback.answer("–≠—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", show_alert=True)

@dp.callback_query(F.data == "change_language")
async def change_language_handler(callback: types.CallbackQuery):
    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption="Please select your language:")
    await callback.message.edit_media(
        media=media,
        reply_markup=get_language_menu()
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("set_lang_"))
async def set_language_handler(callback: types.CallbackQuery):
    lang = callback.data.split("_")[2]
    lang_name = "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π" if lang == "en" else "–†—É—Å—Å–∫–∏–π"
    await callback.answer(f"–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {lang_name}", show_alert=True)

    media = InputMediaPhoto(media=FSInputFile(PHOTO_PATH), caption=WELCOME_TEXT)
    await callback.message.edit_media(
        media=media,
        reply_markup=get_main_menu()
    )

async def main():
    init_db()
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
